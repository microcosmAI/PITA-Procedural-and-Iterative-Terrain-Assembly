=============================
Peter Algorithm Configuration
=============================

This guide delves into the ``config.yml`` file of the Peter Algorithm, a pivotal component that determines the simulation environment, object behaviors, and overall dynamics. Through this file, users can customize numerous aspects of the simulation to align with their specific research goals or experimental setups.

Environment Setup
-----------------

The environment is the virtual space where simulations occur. Its configuration is crucial for defining the boundaries and conditions under which objects interact.

``size_range``
  Defines the dimensions of the simulation environment. It accepts a list for the length and width, allowing for flexibility in environment size.
  
  - **Format**: ``[length_range, width_range]``
  - **Example**: ``size_range: [200, 300]`` specifies a length between 200 and 300 units and a constant width of 300 units.
  
``Style``
  Adjusts the visual aesthetics of the simulation, enhancing readability or providing a more engaging visual experience.
  
  - **Parameters**:
    - ``pretty_mode``: When set to True, applies a stylized rendering to the environment.
  - **Example**: ``Style: pretty_mode: False`` disables stylized rendering, opting for a more basic visual presentation.

``random_seed``
  Ensures reproducibility of simulations by initializing the random number generator with a fixed seed.
  
  - **Usage**: ``random_seed: 42`` sets the seed to 42, ensuring consistent simulation outcomes for the same configurations.

Lighting Configuration
----------------------

``Headlight``
  Controls the simulation's lighting, affecting how objects are illuminated and perceived.
  
  - **Parameters**:
    - ``active``: Toggles the headlight on (1) or off (0).
    - ``diffuse``: Defines the diffuse light components in RGB format.
    - ``ambient``: Specifies the ambient light components, also in RGB.
  - **Example**:
    ::
    
      Headlight:
        active: 1
        diffuse: [0.4, 0.4, 0.4]
        ambient: [0.1, 0.1, 0.1]

Global Rules
------------

Defines rules that apply universally within the environment, dictating object interactions and constraints.

``Rules``
  Consists of several sub-rules, each with specific purposes:
  
  - ``MinAllDistance``: Enforces a minimum distance between all objects to avoid overlaps or excessive proximity.
    - **Example**: ``MinAllDistance: distance: 1.0`` sets the minimum distance to 1 unit.
  - ``Boundary``: Ensures objects are placed within predefined environmental boundaries.
  - ``Height``: Specifies a ground level, dictating the minimum height at which objects can be placed.
    - **Example**: ``Height: ground_level: 0.0`` sets the ground level at 0 units.

Borders and Objects
-------------------

``Borders``
  Defines properties and placement of borders around the simulation environment, enhancing realism or providing constraints.
  
  - **Parameters** include ``xml_name`` for asset file specification, ``place`` to toggle placement, and ``tags`` for categorization.
  - **Example**:
    ::
    
      Borders:
        xml_name: "Border.xml"
        place: True
        tags: ["Border"]

``Objects``
  Details configurations for each object type within the environment, including appearance, quantity, and behavior.
  
  - **Configurations** cover a wide range, from ``xml_name`` and ``amount`` to more specific attributes like ``z_rotation_range``, ``color_groups``, and ``size_groups``.
  - **Example**:
    ::
    
      Objects:
        Agent:
          xml_name: "Agent.xml"
          amount: [1, 1]
          distribution:
            name: "MultivariateNormalDistribution"
            mean: [20, 20]
            cov: [[100, 0], [0, 100]]

Area Configuration
------------------

Allows for dividing the environment into distinct sections, each with tailored settings.

- Each ``Area`` can have its ``Rules`` and ``Objects``, applying localized configurations.
- **Example**:
  ::
  
    Areas:
      Area1:
        Rules:
          MinAllDistance:
            distance: 1.0
        Objects:
          Tree:
            xml_name: "Tree.xml"
            amount: [6, 10]
            distribution:
              name: "CircularUniformDistribution"
              loc: 28
              scale: 50

Conclusion
----------

The ``config.yml`` file is a powerful tool for customizing the Peter Algorithm's simulation environment.


===========================
Peter Algorithm Configuration Guide
===========================

The Peter Algorithm's ``config.yml`` file is a central piece allowing users to define and customize the simulation environment, object properties, and behaviors. This guide explains each section of the ``config.yml`` file to offer users a clear understanding of how to tailor the algorithm to their specific needs.

Environment Configuration
-------------------------

The environment section specifies the global settings for the simulation environment.

- **size_range**: Defines the dimensions of the simulation environment. The length and width are specified within a range, providing flexibility in environment sizing.

  .. code-block:: yaml

    size_range:
      - length_range: [200, 300]
      - width_range: [300, 300]

- **Style**: Adjusts the visual representation of the environment. ``pretty_mode`` toggles a stylized rendering.

  .. code-block:: yaml

    Style:
      - pretty_mode: False

- **random_seed**: Sets a seed for random number generation, ensuring reproducibility.

  .. code-block:: yaml

    random_seed: 42

- **Headlight**: Configures the simulation's lighting. ``active``, ``diffuse``, and ``ambient`` parameters influence the lighting conditions.

  .. code-block:: yaml

    Headlight:
      - active: 0
      - diffuse: [0.4, 0.4, 0.4]
      - ambient: [0.1, 0.1, 0.1]

- **Rules**: Global rules applied within the environment, affecting object interactions and constraints. Includes ``MinAllDistance``, ``Boundary``, and ``Height`` sub-rules.

  .. code-block:: yaml

    Rules:
      - MinAllDistance:
          - distance: 1.0
      - Boundary:
      - Height:
          - ground_level: 0.0

- **Borders**: Defines the properties and placement of borders around the simulation environment.

  .. code-block:: yaml

    Borders:
      - xml_name: "Border.xml"
      - place: True
      - tags: ["Border"]

Objects Configuration
---------------------

Specifies settings for each type of object within the environment, including their appearance, behavior, and interaction properties.

- **Agent**, **Ball**, **Tree**, **Stone**, **Apple**: Each entry under ``Objects`` represents a different object type, with configurations such as ``xml_name``, ``amount``, ``distribution``, ``z_rotation_range``, ``color_groups``, ``size_groups``, ``size_value_range``, and ``tags``.

  .. code-block:: yaml

    Objects:
      Agent:
        - xml_name: "Agent.xml"
        - amount: [1, 1]
        ...

Area Configuration
------------------

Allows defining distinct sections within the environment, each with its own set of rules and objects.

- **Area1**, **Area2**, etc.: Each ``Area`` can have its unique ``Rules`` and ``Objects``, enabling localized configurations.

  .. code-block:: yaml

    Areas:
      Area1:
        Rules:
          - MinAllDistance:
              - distance: 1.0
          - Boundary:
          - Height:
              - ground_level: 0.0
        Objects:
          Tree:
            - xml_name: "Tree.xml"
            - amount: [6, 10]
            ...

Conclusion
----------

The ``config.yml`` file serves as a powerful tool for customizing the Peter Algorithm's simulation environment to meet specific research or experimental requirements. Through this guide, users are equipped with the knowledge to effectively configure the simulation environment, object properties, and behaviors.

